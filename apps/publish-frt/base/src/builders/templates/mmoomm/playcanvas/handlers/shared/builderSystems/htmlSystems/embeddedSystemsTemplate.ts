// Universo Platformo | MMOOMM Embedded Systems Template
// Shared template for embedded systems management

import { EmbeddedSystemsRegistry, IEmbeddedSystemsRegistry, IEmbeddedSystem } from './EmbeddedSystemsRegistry'

/**
 * Creates a standardized embedded systems registry
 * @returns Embedded systems registry instance
 */
export function createEmbeddedSystemsRegistry(): IEmbeddedSystemsRegistry {
    return new EmbeddedSystemsRegistry()
}

/**
 * Creates a default MMOOMM embedded systems registry with proper injection order
 * @returns Configured registry with MMOOMM systems order
 */
export function createMMOOMMEmbeddedSystemsRegistry(): IEmbeddedSystemsRegistry {
    const registry = new EmbeddedSystemsRegistry()

    // Note: Injection order will be set AFTER systems are registered
    // in the BuilderSystemsManager to avoid "system not registered" errors

    return registry
}

/**
 * Base class for MMOOMM embedded systems
 */
export abstract class BaseEmbeddedSystem implements IEmbeddedSystem {
    abstract name: string
    abstract generateCode(): string
    abstract getDependencies(): string[]

    /**
     * Helper method to format JavaScript code with proper indentation
     */
    protected formatCode(code: string, indentLevel: number = 2): string {
        const indent = ' '.repeat(indentLevel * 4)
        return code
            .split('\n')
            .map(line => line.trim() ? `${indent}${line}` : '')
            .join('\n')
    }

    /**
     * Helper method to create global object assignment
     */
    protected createGlobalObject(objectName: string, objectCode: string): string {
        return `        window.${objectName} = ${objectCode};`
    }

    /**
     * Helper method to create function declaration
     */
    protected createFunction(functionName: string, functionCode: string): string {
        return `        function ${functionName}${functionCode}`
    }
}

/**
 * Generates complete embedded JavaScript code from registry
 * @param registry Embedded systems registry
 * @returns Complete JavaScript code string
 */
export function generateEmbeddedJavaScriptCode(registry: IEmbeddedSystemsRegistry): string {
    // Validate dependencies before generation
    if (!registry.validateDependencies()) {
        throw new Error('Embedded systems have unresolved dependencies')
    }

    const header = [
        '        // Universo Platformo | Space MMO Embedded Systems',
        '        // Generated by EmbeddedSystemsRegistry',
        ''
    ].join('\n')

    const systemsCode = registry.generateAllSystems()

    return header + systemsCode
}

/**
 * Creates an embedded system from legacy code
 * Utility for migrating existing embedded JavaScript
 */
export function createLegacyEmbeddedSystem(
    name: string,
    legacyCode: string,
    dependencies: string[] = []
): IEmbeddedSystem {
    return {
        name,
        generateCode: () => legacyCode,
        getDependencies: () => dependencies
    }
}

/**
 * Validates embedded system code for common issues
 */
export function validateEmbeddedSystemCode(code: string): {
    isValid: boolean
    warnings: string[]
    errors: string[]
} {
    const warnings: string[] = []
    const errors: string[] = []

    // Check for common issues
    if (code.includes('console.log') && code.split('console.log').length > 10) {
        warnings.push('Excessive console.log statements detected')
    }

    if (code.includes('window.') && !code.includes('window.addEventListener')) {
        // Check if global objects are properly created
        const globalObjects = code.match(/window\.(\w+)\s*=/g)
        if (globalObjects) {
            warnings.push(`Global objects created: ${globalObjects.join(', ')}`)
        }
    }

    if (code.includes('document.getElementById') && !code.includes('if (')) {
        warnings.push('DOM element access without null checks detected')
    }

    // Check for syntax issues (basic)
    const openBraces = (code.match(/{/g) || []).length
    const closeBraces = (code.match(/}/g) || []).length
    if (openBraces !== closeBraces) {
        errors.push('Mismatched braces detected')
    }

    return {
        isValid: errors.length === 0,
        warnings,
        errors
    }
}
