// Universo Platformo | PlayCanvas MMOOMM Builder
// Advanced MMO template builder with modular architecture

import { AbstractTemplateBuilder } from '../../../common/AbstractTemplateBuilder'
import { BuildOptions, TemplateConfig } from '../../../common/types'
import type { IFlowData, IUPDLMultiScene } from '@universo/publish-srv'
import { MMOOMMTemplateConfig } from './config'
import { SpaceHandler, EntityHandler, ComponentHandler, EventHandler, ActionHandler, DataHandler, UniversoHandler } from './handlers'
import { getDefaultRotatorScript, setupScriptSystem } from './scripts'
import { createMMOOMMBuilderSystemsManager, IBuilderSystemsManager } from './handlers/shared/builderSystems'

export class PlayCanvasMMOOMMBuilder extends AbstractTemplateBuilder {
    private spaceHandler = new SpaceHandler()
    private entityHandler = new EntityHandler()
    private componentHandler = new ComponentHandler()
    private eventHandler = new EventHandler()
    private actionHandler = new ActionHandler()
    private dataHandler = new DataHandler()
    private universoHandler = new UniversoHandler()
    private builderSystemsManager: IBuilderSystemsManager

    constructor() {
        super('mmoomm')

        // Initialize script system for MMOOMM template
        setupScriptSystem()

        // Initialize modular builder systems
        this.builderSystemsManager = createMMOOMMBuilderSystemsManager()
        console.log('[PlayCanvasMMOOMMBuilder] Modular systems initialized')
    }

    /**
     * Build PlayCanvas MMOOMM HTML from flow data
     */
    async build(flowData: IFlowData, options: BuildOptions = {}): Promise<string> {
        console.log('[PlayCanvasMMOOMMBuilder] Building MMOOMM project with modular systems')

        try {
            // Single scene processing
            if (flowData.updlSpace && !flowData.multiScene) {
                console.log('[PlayCanvasMMOOMMBuilder] Building single scene MMOOMM')
                const nodes = this.extractMMOOMMNodes(flowData)

                // Check if we have only Space node with no other content
                const hasContent =
                    nodes.entities.length > 0 ||
                    nodes.components.length > 0 ||
                    nodes.events.length > 0 ||
                    nodes.actions.length > 0 ||
                    nodes.data.length > 0 ||
                    nodes.universo.length > 0

                if (!hasContent) {
                    console.log('[PlayCanvasMMOOMMBuilder] Only Space node found, generating default scene')
                    return this.generateDefaultScene(options)
                }

                return this.buildSingleScene(flowData, options)
            }

            // Multi-scene processing
            if (flowData.multiScene) {
                console.log('[PlayCanvasMMOOMMBuilder] Building multi-scene MMOOMM:', {
                    totalScenes: flowData.multiScene.totalScenes
                })
                return this.buildMultiScene(flowData.multiScene, options)
            }

            // Fallback - generate default scene
            console.warn('[PlayCanvasMMOOMMBuilder] No updlSpace or multiScene, generating default scene')
            return this.generateDefaultScene(options)
        } catch (error) {
            console.error('[PlayCanvasMMOOMMBuilder] Build error:', error)
            return this.generateDefaultScene(options)
        }
    }

    /**
     * Build single scene MMOOMM using modular systems
     */
    private buildSingleScene(flowData: IFlowData, options: BuildOptions): string {
        const nodes = this.extractMMOOMMNodes(flowData)

        console.log(`[PlayCanvasMMOOMMBuilder] Processing nodes - Entities: ${nodes.entities.length}, Components: ${nodes.components.length}`)

        // Process all node types using handlers
        const spaceScript = this.spaceHandler.process(nodes.spaces[0], options)
        const entityScript = this.entityHandler.process(nodes.entities, options)
        const componentScript = this.componentHandler.process(nodes.components, options)
        const eventScript = this.eventHandler.process(nodes.events, options)
        const actionScript = this.actionHandler.process(nodes.actions, options)
        const dataScript = this.dataHandler.process(nodes.data, options)
        const universoScript = this.universoHandler.process(nodes.universo, options)

        // Combine all scripts into executable code
        const combinedScript = [
            '// PlayCanvas MMOOMM Scene - Generated by Universo Platformo',
            '// Multi-user virtual world with real-time synchronization',
            '',
            '// MMO Space setup',
            spaceScript,
            '',
            '// Entities with MMO capabilities',
            entityScript,
            '',
            '// Components',
            componentScript,
            '',
            '// Real-time Events',
            eventScript,
            '',
            '// Network Actions',
            actionScript,
            '',
            '// Data synchronization',
            dataScript,
            '',
            '// Universo networking gateway',
            universoScript,
            '',
            '// Start PlayCanvas application',
            'app.start();'
        ].join('\n')

        // Use modular systems manager to generate complete HTML
        return this.builderSystemsManager.generateCompleteHTML(combinedScript, options)
    }

    /**
     * Build multi-scene MMOOMM using modular systems
     */
    private buildMultiScene(multiScene: IUPDLMultiScene, options: BuildOptions): string {
        // For multi-scene, we process each scene and combine them
        const scenes = multiScene.scenes || []
        const allEntities: any[] = []
        const allComponents: any[] = []
        const allEvents: any[] = []
        const allActions: any[] = []
        const allData: any[] = []
        const allUniverso: any[] = []

        // Collect nodes from all scenes
        scenes.forEach((scene) => {
            if (scene.spaceData) {
                allEntities.push(...(scene.spaceData.entities || []))
                allComponents.push(...(scene.spaceData.components || []))
                allEvents.push(...(scene.spaceData.events || []))
                allActions.push(...(scene.spaceData.actions || []))
                allData.push(...(scene.spaceData.data || []))
                allUniverso.push(...(scene.spaceData.universo || []))
            }
        })

        console.log(`[PlayCanvasMMOOMMBuilder] Multi-scene processing - Total scenes: ${scenes.length}, Entities: ${allEntities.length}, Components: ${allComponents.length}`)

        // Process using handlers
        const spaceScript = this.spaceHandler.process({ data: { type: 'root', id: 'multi-scene' } }, options)
        const entityScript = this.entityHandler.process(allEntities, options)
        const componentScript = this.componentHandler.process(allComponents, options)
        const eventScript = this.eventHandler.process(allEvents, options)
        const actionScript = this.actionHandler.process(allActions, options)
        const dataScript = this.dataHandler.process(allData, options)
        const universoScript = this.universoHandler.process(allUniverso, options)

        // Combine multi-scene script
        const combinedScript = [
            '// PlayCanvas MMOOMM Multi-Scene - Generated by Universo Platformo',
            `// Total scenes: ${scenes.length}`,
            '',
            spaceScript,
            entityScript,
            componentScript,
            eventScript,
            actionScript,
            dataScript,
            universoScript,
            '',
            'app.start();'
        ].join('\n')

        // Use modular systems manager to generate complete HTML
        return this.builderSystemsManager.generateCompleteHTML(combinedScript, options)
    }

    /**
     * Extract MMOOMM-specific nodes from flow data
     */
    private extractMMOOMMNodes(flowData: IFlowData): {
        spaces: any[]
        entities: any[]
        components: any[]
        events: any[]
        actions: any[]
        data: any[]
        universo: any[]
    } {
        // Extract base nodes using parent method
        const baseNodes = this.extractNodes(flowData)

        const firstSpace = baseNodes.spaces[0] || {}

        return {
            spaces: baseNodes.spaces,
            entities: (firstSpace as any).entities || [],
            components: (firstSpace as any).components || [],
            events: (firstSpace as any).events || [],
            actions: (firstSpace as any).actions || [],
            data: baseNodes.data,
            universo: (firstSpace as any).universo || []
        }
    }

    /**
     * Generate default scene with configurable demo mode (for empty flows)
     */
    private generateDefaultScene(options: BuildOptions): string {
        return this.builderSystemsManager.generateErrorScene(options)
    }

    /**
     * Implementation of abstract method from AbstractTemplateBuilder
     */
    protected generateHTML(
        content: {
            spaceContent: string
            objectContent: string
            cameraContent: string
            template: string
            error?: boolean
        },
        options: BuildOptions = {}
    ): string {
        // This method is required by AbstractTemplateBuilder but not used in our implementation
        // We use build() method instead for more advanced processing
        return this.builderSystemsManager.generateErrorScene(options)
    }

    /**
     * Get template configuration
     */
    getTemplateInfo(): TemplateConfig {
        return MMOOMMTemplateConfig
    }

    /**
     * Get required libraries for this template
     */
    getRequiredLibraries(): string[] {
        return ['playcanvas']
    }
}
