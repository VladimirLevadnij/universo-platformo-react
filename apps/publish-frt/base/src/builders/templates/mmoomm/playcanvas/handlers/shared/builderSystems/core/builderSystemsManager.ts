// Universo Platformo | MMOOMM Builder Systems Manager
// Coordinates all extracted systems for PlayCanvasMMOOMMBuilder

import { BuildOptions } from '../../../../../../../common/types'
import { IHTMLDocumentGenerator } from '../htmlSystems/htmlDocumentGenerator'
import { IEmbeddedSystemsRegistry } from '../htmlSystems/embeddedSystemsRegistry'
import { IGlobalObjectsManager } from '../globalObjects/globalObjectsManager'
import { IPlayCanvasInitializer } from '../initialization/playcanvasInitializer'
import { ISceneInitializer } from '../initialization/sceneInitializer'
import { IDefaultSceneGenerator } from './defaultSceneGenerator'

/**
 * Interface for builder systems manager
 */
export interface IBuilderSystemsManager {
    initialize(): void
    generateCompleteHTML(sceneScript: string, options: BuildOptions): string
    generateEmbeddedJavaScript(): string
    generatePlayCanvasInit(): string
    generateSceneInit(): string
    generateErrorScene(options: BuildOptions): string
    validateSystems(): boolean
    getSystemsStatus(): Record<string, boolean>
    getRegisteredEmbeddedSystems(): string[]
    getRegisteredGlobalObjects(): string[]
    reset(): void
}

/**
 * Builder Systems Manager for MMOOMM template
 * Coordinates all extracted systems and manages their lifecycle
 */
export class BuilderSystemsManager implements IBuilderSystemsManager {
    private htmlGenerator: IHTMLDocumentGenerator
    private embeddedRegistry: IEmbeddedSystemsRegistry
    private globalManager: IGlobalObjectsManager
    private playcanvasInitializer: IPlayCanvasInitializer
    private sceneInitializer: ISceneInitializer
    private defaultSceneGenerator: IDefaultSceneGenerator
    private initialized = false

    constructor(
        htmlGenerator: IHTMLDocumentGenerator,
        embeddedRegistry: IEmbeddedSystemsRegistry,
        globalManager: IGlobalObjectsManager,
        playcanvasInitializer: IPlayCanvasInitializer,
        sceneInitializer: ISceneInitializer,
        defaultSceneGenerator: IDefaultSceneGenerator
    ) {
        this.htmlGenerator = htmlGenerator
        this.embeddedRegistry = embeddedRegistry
        this.globalManager = globalManager
        this.playcanvasInitializer = playcanvasInitializer
        this.sceneInitializer = sceneInitializer
        this.defaultSceneGenerator = defaultSceneGenerator
    }

    /**
     * Initialize all systems
     */
    initialize(): void {
        if (this.initialized) {
            console.warn('[BuilderSystemsManager] Already initialized')
            return
        }

        console.log('[BuilderSystemsManager] Initializing all systems...')

        // Validate all systems before initialization
        if (!this.validateSystems()) {
            throw new Error('[BuilderSystemsManager] System validation failed')
        }

        // Validate dependencies
        if (!this.embeddedRegistry.validateDependencies()) {
            throw new Error('[BuilderSystemsManager] Embedded systems dependencies validation failed')
        }

        if (!this.globalManager.validateDependencies()) {
            throw new Error('[BuilderSystemsManager] Global objects dependencies validation failed')
        }

        this.initialized = true
        console.log('[BuilderSystemsManager] All systems initialized successfully')
    }

    /**
     * Generate complete HTML document
     */
    generateCompleteHTML(sceneScript: string, options: BuildOptions): string {
        this.ensureInitialized()

        console.log('[BuilderSystemsManager] Generating complete HTML document...')

        // Generate embedded JavaScript
        const embeddedJS = this.generateEmbeddedJavaScript()

        // Generate complete scene script with initialization
        const completeSceneScript = `
${this.generatePlayCanvasInit()}

${embeddedJS}

${this.generateSceneInit()}

${sceneScript}
`

        // Generate HTML document
        const htmlDocument = this.htmlGenerator.generateDocument(
            completeSceneScript,
            '', // Embedded JS is already included in scene script
            options
        )

        console.log('[BuilderSystemsManager] HTML document generation complete')
        return htmlDocument
    }

    /**
     * Generate embedded JavaScript from all systems
     */
    generateEmbeddedJavaScript(): string {
        this.ensureInitialized()

        console.log('[BuilderSystemsManager] Generating embedded JavaScript...')

        // Generate global objects initialization
        const globalObjectsCode = this.globalManager.generateInitializationCode()

        // Generate embedded systems code
        const embeddedSystemsCode = this.embeddedRegistry.generateAllSystems()

        const completeEmbeddedJS = `
        // Universo Platformo | MMOOMM Embedded Systems
        // Generated by BuilderSystemsManager

${globalObjectsCode}

${embeddedSystemsCode}
`

        console.log('[BuilderSystemsManager] Embedded JavaScript generation complete')
        return completeEmbeddedJS
    }

    /**
     * Generate PlayCanvas initialization code
     */
    generatePlayCanvasInit(): string {
        this.ensureInitialized()
        return this.playcanvasInitializer.generateInitializationCode()
    }

    /**
     * Generate scene initialization code
     */
    generateSceneInit(): string {
        this.ensureInitialized()
        return this.sceneInitializer.generateSceneInitializationCode()
    }

    /**
     * Generate error scene
     */
    generateErrorScene(options: BuildOptions): string {
        this.ensureInitialized()
        
        console.log('[BuilderSystemsManager] Generating error scene...')
        
        const errorSceneScript = this.defaultSceneGenerator.generateErrorScene(options)
        return this.generateCompleteHTML(errorSceneScript, options)
    }

    /**
     * Validate all systems are properly configured
     */
    validateSystems(): boolean {
        const systems = [
            { name: 'HTMLGenerator', system: this.htmlGenerator },
            { name: 'EmbeddedRegistry', system: this.embeddedRegistry },
            { name: 'GlobalManager', system: this.globalManager },
            { name: 'PlayCanvasInitializer', system: this.playcanvasInitializer },
            { name: 'SceneInitializer', system: this.sceneInitializer },
            { name: 'DefaultSceneGenerator', system: this.defaultSceneGenerator }
        ]

        for (const { name, system } of systems) {
            if (!system) {
                console.error(`[BuilderSystemsManager] ${name} is not configured`)
                return false
            }
        }

        return true
    }

    /**
     * Get status of all systems
     */
    getSystemsStatus(): Record<string, boolean> {
        return {
            initialized: this.initialized,
            htmlGenerator: !!this.htmlGenerator,
            embeddedRegistry: !!this.embeddedRegistry,
            globalManager: !!this.globalManager,
            playcanvasInitializer: !!this.playcanvasInitializer,
            sceneInitializer: !!this.sceneInitializer,
            defaultSceneGenerator: !!this.defaultSceneGenerator,
            embeddedDependenciesValid: this.embeddedRegistry?.validateDependencies() || false,
            globalDependenciesValid: this.globalManager?.validateDependencies() || false
        }
    }

    /**
     * Get registered embedded systems
     */
    getRegisteredEmbeddedSystems(): string[] {
        return this.embeddedRegistry?.getRegisteredSystems() || []
    }

    /**
     * Get registered global objects
     */
    getRegisteredGlobalObjects(): string[] {
        return this.globalManager?.getRegisteredObjects() || []
    }

    /**
     * Reset all systems (for testing)
     */
    reset(): void {
        this.initialized = false
        console.log('[BuilderSystemsManager] Systems reset')
    }

    /**
     * Ensure systems are initialized
     */
    private ensureInitialized(): void {
        if (!this.initialized) {
            throw new Error('[BuilderSystemsManager] Systems not initialized. Call initialize() first.')
        }
    }
}

/**
 * Configuration for builder systems manager
 */
export interface BuilderSystemsConfig {
    enableDebugLogging?: boolean
    validateOnInitialize?: boolean
    autoInitialize?: boolean
}

/**
 * Creates a configured builder systems manager
 */
export function createBuilderSystemsManager(
    htmlGenerator: IHTMLDocumentGenerator,
    embeddedRegistry: IEmbeddedSystemsRegistry,
    globalManager: IGlobalObjectsManager,
    playcanvasInitializer: IPlayCanvasInitializer,
    sceneInitializer: ISceneInitializer,
    defaultSceneGenerator: IDefaultSceneGenerator,
    config: BuilderSystemsConfig = {}
): IBuilderSystemsManager {
    const {
        enableDebugLogging = true,
        validateOnInitialize = true,
        autoInitialize = false
    } = config

    const manager = new BuilderSystemsManager(
        htmlGenerator,
        embeddedRegistry,
        globalManager,
        playcanvasInitializer,
        sceneInitializer,
        defaultSceneGenerator
    )

    if (autoInitialize) {
        manager.initialize()
    }

    return manager
}
