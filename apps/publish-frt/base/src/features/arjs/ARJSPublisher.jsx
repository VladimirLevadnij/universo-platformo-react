// Universo Platformo | AR.js Publisher
// React component for publishing AR.js experiences using streaming mode

import React, { useState, useEffect } from 'react'
import { useTranslation } from 'react-i18next'
import { getCurrentUrlIds, getAuthHeaders } from '../../services/api'
import { ARJSPublishApi } from '../../api/ARJSPublishApi'

// Universo Platformo | –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ true –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
// –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const DEMO_MODE = false

// MUI components
import {
    Button,
    Box,
    Typography,
    TextField,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Switch,
    FormControlLabel,
    Card,
    CardContent,
    CircularProgress,
    Alert,
    Paper,
    Snackbar,
    Stack,
    FormGroup,
    Link,
    Divider,
    FormHelperText
} from '@mui/material'

// Icons
import { IconCopy, IconDownload, IconQrcode } from '@tabler/icons-react'

// Import common components
import GenerationModeSelect from '../../components/GenerationModeSelect'
// –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
import PublicationLink from '../../components/PublicationLink'

// QR Code component (optional dependency)
let QRCode
try {
    QRCode = require('qrcode.react')
} catch (e) {
    // QRCode component will be undefined if package not available
}

/**
 * AR.js Publisher Component
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AR.js –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
const ARJSPublisher = ({ flow, unikId, onPublish, onCancel, initialConfig }) => {
    const { t } = useTranslation('publish')

    // State for project title
    const [projectTitle, setProjectTitle] = useState(flow?.name || '')
    // State for marker type
    const [markerType, setMarkerType] = useState('preset')
    // State for marker value
    const [markerValue, setMarkerValue] = useState('hiro')
    // State for loading indicator
    const [loading, setLoading] = useState(false)
    // State for published URL
    const [publishedUrl, setPublishedUrl] = useState('')
    // State for publishing status
    const [isPublishing, setIsPublishing] = useState(false)
    // State for public toggle
    const [isPublic, setIsPublic] = useState(false)
    // State for error message
    const [error, setError] = useState(null)
    // State for snackbar
    const [snackbar, setSnackbar] = useState({ open: false, message: '' })
    // State for generation mode
    const [generationMode, setGenerationMode] = useState('streaming') // –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    // Universo Platformo | State for template type in demo mode
    const [templateType, setTemplateType] = useState('quiz')

    // Initialize with flow data when component mounts
    useEffect(() => {
        console.log('üß™ [ARJSPublisher] Current URL analysis:')
        console.log('üß™ [ARJSPublisher] window.location.href:', window.location.href)
        console.log('üß™ [ARJSPublisher] window.location.pathname:', window.location.pathname)

        const urlPathParts = window.location.pathname.split('/')
        console.log('üß™ [ARJSPublisher] URL path parts:', urlPathParts)

        const uniksIndex = urlPathParts.findIndex((p) => p === 'uniks')
        const chatflowsIndex = urlPathParts.findIndex((p) => p === 'chatflows')

        let urlUnikId = null
        let urlFlowId = null

        if (uniksIndex >= 0 && uniksIndex + 1 < urlPathParts.length) {
            urlUnikId = urlPathParts[uniksIndex + 1]
            console.log('üß™ [ARJSPublisher] Found unikId in URL:', urlUnikId)
        }

        if (chatflowsIndex >= 0 && chatflowsIndex + 1 < urlPathParts.length) {
            urlFlowId = urlPathParts[chatflowsIndex + 1]
            console.log('üß™ [ARJSPublisher] Found flowId in URL:', urlFlowId)
        }

        console.log('üß™ [ARJSPublisher] Props vs URL comparison:')
        console.log('üß™ [ARJSPublisher] Prop unikId:', unikId)
        console.log('üß™ [ARJSPublisher] Prop flow.id:', flow?.id)
        console.log('üß™ [ARJSPublisher] URL unikId:', urlUnikId)
        console.log('üß™ [ARJSPublisher] URL flowId:', urlFlowId)

        if (flow) {
            setProjectTitle(flow.name || 'AR.js Experience')
        }
    }, [flow])

    /**
     * Handle marker type change
     */
    const handleMarkerTypeChange = (event) => {
        setMarkerType(event.target.value)
    }

    /**
     * Handle marker value change
     */
    const handleMarkerValueChange = (event) => {
        setMarkerValue(event.target.value)
    }

    /**
     * Handle template type change (for demo mode)
     */
    const handleTemplateTypeChange = (event) => {
        setTemplateType(event.target.value)
    }

    /**
     * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
     */
    const TemplateSelector = () => {
        if (!DEMO_MODE) return null

        return (
            <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel id='template-type-label'>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã</InputLabel>
                <Select
                    labelId='template-type-label'
                    value={templateType}
                    label='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã'
                    onChange={handleTemplateTypeChange}
                >
                    <MenuItem value='quiz'>–ö–≤–∏–∑ –ø–æ —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º</MenuItem>
                </Select>
            </FormControl>
        )
    }

    /**
     * Handle public toggle change
     */
    const handlePublicChange = async (value) => {
        setIsPublic(value)

        // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º URL
        if (!value) {
            setPublishedUrl('')
            return
        }

        // Universo Platformo | –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
        if (DEMO_MODE) {
            setLoading(true)
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
            setTimeout(() => {
                setPublishedUrl('https://plano.universo.pro/')
                setSnackbar({ open: true, message: t('success.published') })
                setLoading(false)
            }, 1000)
            return
        }

        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ streaming —Ä–µ–∂–∏–º
        if (generationMode !== 'streaming') {
            setError('Unsupported generation mode: ' + generationMode)
            return
        }

        console.log('üì± [ARJSPublisher.handlePublicChange] Publishing in STREAMING mode for flow:', flow.id)

        setIsPublishing(true)
        setError(null)

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            const publishResult = await ARJSPublishApi.publishARJS({
                chatflowId: flow.id,
                generationMode: 'streaming',
                isPublic: true,
                projectName: projectTitle,
                unikId: unikId || getCurrentUrlIds().unikId
            })

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ª–æ–∫–∞–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
            const fullPublicUrl = DEMO_MODE ? 'https://plano.universo.pro/' : `${window.location.origin}/p/${flow.id}`
            setPublishedUrl(fullPublicUrl)
            setSnackbar({ open: true, message: t('success.published') })

            if (onPublish) {
                onPublish({ ...publishResult, publishedUrl: fullPublicUrl })
            }
        } catch (error) {
            console.error('üì± [ARJSPublisher.handlePublicChange] Error during publication:', error)
            setError(error instanceof Error ? error.message : 'Unknown error occurred during publication')
            setIsPublic(false) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        } finally {
            setIsPublishing(false)
        }
    }

    /**
     * Handle generation mode change
     */
    const handleGenerationModeChange = (mode) => {
        setGenerationMode(mode)
        console.log('üì± [ARJSPublisher] Generation mode changed to:', mode)

        // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ URL, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (publishedUrl) {
            setPublishedUrl('')
            setIsPublic(false)
        }
    }

    /**
     * Handle copy URL button click
     */
    const handleCopyUrl = (url) => {
        navigator.clipboard
            .writeText(url)
            .then(() => {
                setSnackbar({ open: true, message: t('success.copied') })
            })
            .catch((error) => {
                console.error('Failed to copy:', error)
            })
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
     */
    const getMarkerImage = () => {
        // –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        if (markerType === 'preset') {
            return `https://raw.githubusercontent.com/AR-js-org/AR.js/master/data/images/${markerValue}.png`
        }
        return ''
    }

    /**
     * Handle snackbar close
     */
    const handleSnackbarClose = () => {
        setSnackbar({
            ...snackbar,
            open: false
        })
    }

    const handleError = (message, errorObj) => {
        console.error(message, errorObj)
        setError(errorObj instanceof Error ? errorObj.message : String(errorObj || message))
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    return (
        <Box sx={{ width: '100%' }}>
            <Typography variant='h4' gutterBottom>
                {t('technologies.arjs')}
            </Typography>
            <Typography variant='body2' color='text.secondary' paragraph>
                {t('technologies.arjsDescription')}
            </Typography>

            {/* Main Content - Scrollable Page */}
            <Card variant='outlined' sx={{ mb: 3 }}>
                <CardContent>
                    <Box sx={{ position: 'relative' }}>
                        {loading && (
                            <Box
                                sx={{
                                    display: 'flex',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    position: 'absolute',
                                    top: 0,
                                    left: 0,
                                    right: 0,
                                    bottom: 0,
                                    backgroundColor: 'rgba(255, 255, 255, 0.7)',
                                    zIndex: 10
                                }}
                            >
                                <CircularProgress />
                            </Box>
                        )}

                        {/* Project Title Input */}
                        <TextField
                            label={t('project.title')}
                            value={projectTitle}
                            onChange={(e) => setProjectTitle(e.target.value)}
                            fullWidth
                            margin='normal'
                            variant='outlined'
                        />

                        {/* Generation Mode Selector */}
                        <GenerationModeSelect value={generationMode} onChange={handleGenerationModeChange} disabled={!!publishedUrl} />

                        {/* Type of Marker */}
                        <FormControl fullWidth variant='outlined' margin='normal'>
                            <InputLabel>{t('marker.type')}</InputLabel>
                            <Select value={markerType} onChange={handleMarkerTypeChange} label={t('marker.type')} disabled={!!publishedUrl}>
                                <MenuItem value='preset'>{t('marker.standard')}</MenuItem>
                            </Select>
                        </FormControl>

                        {/* Marker Selection */}
                        {markerType === 'preset' && (
                            <FormControl fullWidth variant='outlined' margin='normal'>
                                <InputLabel>{t('marker.presetLabel')}</InputLabel>
                                <Select
                                    value={markerValue}
                                    onChange={handleMarkerValueChange}
                                    label={t('marker.presetLabel')}
                                    disabled={!!publishedUrl}
                                >
                                    <MenuItem value='hiro'>{t('marker.hiro')}</MenuItem>
                                </Select>
                            </FormControl>
                        )}

                        {/* Demo Templates */}
                        <TemplateSelector />

                        {/* Marker Preview */}
                        <Box sx={{ textAlign: 'center', my: 2 }}>
                            <Typography variant='body2' color='text.secondary' gutterBottom>
                                {t('preview.title')}
                            </Typography>
                            {markerType === 'preset' && markerValue && (
                                <Box
                                    component='img'
                                    src={getMarkerImage()}
                                    alt={t('marker.alt')}
                                    sx={{ maxWidth: '200px', border: '1px solid #eee' }}
                                />
                            )}
                            <Typography variant='caption' display='block' sx={{ mt: 1 }}>
                                {t('marker.instruction')}
                            </Typography>
                        </Box>

                        {/* Make Public Toggle —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ */}
                        <Box sx={{ my: 3, width: '100%' }}>
                            <FormControl fullWidth variant='outlined'>
                                <FormControlLabel
                                    control={
                                        <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>
                                            <Switch
                                                checked={isPublic}
                                                onChange={(e) => handlePublicChange(e.target.checked)}
                                                disabled={!!isPublishing}
                                                color='primary'
                                            />
                                            {isPublishing && <CircularProgress size={20} sx={{ ml: 2 }} />}
                                        </Box>
                                    }
                                    label={t('configuration.makePublic')}
                                    sx={{
                                        width: '100%',
                                        margin: 0,
                                        '& .MuiFormControlLabel-label': {
                                            width: '100%',
                                            flexGrow: 1
                                        }
                                    }}
                                    labelPlacement='start'
                                />
                            </FormControl>
                            <Typography variant='body2' color='text.secondary' sx={{ mt: 1 }}>
                                {t('configuration.description')}
                            </Typography>
                        </Box>

                        {/* Public link display */}
                        {publishedUrl && (
                            <Box sx={{ my: 3 }}>
                                <Typography variant='subtitle1' gutterBottom>
                                    {t('arjs.publishedUrl')}:
                                </Typography>
                                <PublicationLink url={publishedUrl} onCopy={handleCopyUrl} />

                                {/* QR Code –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω */}
                                {QRCode && (
                                    <Box sx={{ textAlign: 'center', my: 2 }}>
                                        <Typography variant='body2' gutterBottom>
                                            –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
                                        </Typography>
                                        <Box sx={{ display: 'inline-block', p: 1, bgcolor: 'white', borderRadius: 1 }}>
                                            <QRCode value={publishedUrl} size={180} />
                                        </Box>
                                    </Box>
                                )}

                                <Box sx={{ mt: 3 }}>
                                    <Typography variant='body2' gutterBottom>
                                        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
                                    </Typography>
                                    <Box sx={{ textAlign: 'left', pl: 2 }}>
                                        <Typography variant='body2' component='div'>
                                            <ol>
                                                <li>–û—Ç–∫—Ä–æ–π—Ç–µ URL –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å –∫–∞–º–µ—Ä–æ–π</li>
                                                <li>–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ</li>
                                                <li>–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –º–∞—Ä–∫–µ—Ä {markerType === 'preset' ? `"${markerValue}"` : ''}</li>
                                                <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è 3D –æ–±—ä–µ–∫—Ç–∞</li>
                                            </ol>
                                        </Typography>
                                    </Box>
                                </Box>
                            </Box>
                        )}

                        {/* Error display */}
                        {error && (
                            <Alert severity='error' sx={{ my: 2 }}>
                                {error}
                            </Alert>
                        )}
                    </Box>
                </CardContent>
            </Card>

            {/* Snackbar for notifications */}
            <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleSnackbarClose} message={snackbar.message} />
        </Box>
    )
}

export { ARJSPublisher }
export default ARJSPublisher
