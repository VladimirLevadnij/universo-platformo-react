// Universo Platformo | Generic publish service for all technologies
import { getAuthHeaders } from './api'

export interface PublicationOptions {
    flowId: string
    isPublic: boolean
    unikId: string
    technology: string
    [key: string]: any // –î—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
}

export interface PublicationResult {
    success: boolean
    publicUrl?: string
    error?: string
    [key: string]: any
}

/**
 * –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ª—é–±–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
 */
export const publishService = {
    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
     */
    getPublicUrl(flowId: string, technology: string): string {
        // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ URL
        const techRoutes: Record<string, string> = {
            arjs: 'ar',
            chatbot: 'chatbot',
            playcanvas: 'play',
            babylonjs: 'babylon',
            aframe: 'vr'
        }

        const route = techRoutes[technology.toLowerCase()] || technology.toLowerCase()
        return `${window.location.origin}/${route}/${flowId}`
    },

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
     */
    async savePublicationStatus(options: PublicationOptions): Promise<PublicationResult> {
        try {
            console.log('üìå [publishService.savePublicationStatus] Saving with options:', options)

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const authHeaders = getAuthHeaders()

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            const response = await fetch('/api/updl/publication/status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...authHeaders
                },
                body: JSON.stringify(options)
            })

            if (!response.ok) {
                throw new Error(`API request failed: ${response.status}`)
            }

            const data = await response.json()
            console.log('üìå [publishService.savePublicationStatus] Server response:', data)

            return {
                success: true,
                publicUrl: this.getPublicUrl(options.flowId, options.technology),
                ...data
            }
        } catch (error) {
            console.error('Error saving publication status:', error)

            // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                publicUrl: this.getPublicUrl(options.flowId, options.technology)
            }
        }
    }
}
