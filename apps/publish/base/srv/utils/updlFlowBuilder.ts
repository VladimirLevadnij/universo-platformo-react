// Universo Platformo | UPDL Flow Builder –¥–ª—è Express
// –ê–¥–∞–ø—Ç–µ—Ä –º–µ–∂–¥—É Express –∏ –º–æ–¥—É–ª–µ–º UPDL

import { Request } from 'express'
import { v4 as uuidv4 } from 'uuid'
import { UPDLScene, UPDLFlowResult } from './interfaces/UPDLInterfaces'

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîç [updlFlowBuilder] –ù–∞—á–∞–ª–æ –æ—Ç–ª–∞–¥–∫–∏ –º–æ–¥—É–ª—è')

/**
 * –°–æ–∑–¥–∞–µ—Ç UPDL-—Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
 * @param req - Express –∑–∞–ø—Ä–æ—Å
 * @param isInternal - –§–ª–∞–≥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è UPDL-—Å—Ü–µ–Ω—ã
 */
export const utilBuildUPDLflow = async (req: Request, isInternal: boolean = false): Promise<UPDLFlowResult> => {
    try {
        const chatflowid = req.params.id
        const flowData = req.body.flowData || { nodes: [], edges: [] }
        const chatId = req.body.chatId || uuidv4()

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∑–ª—ã —Å—Ü–µ–Ω—ã
        const nodes = flowData.nodes || []
        const edges = flowData.edges || []

        // –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª —Å—Ü–µ–Ω—ã
        const sceneNode = nodes.find((node: any) => node.data?.name?.toLowerCase() === 'scene')

        if (!sceneNode) {
            throw new Error('Scene node not found in flow')
        }

        // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç–Ω—ã–µ —É–∑–ª—ã
        const objectNodes = nodes.filter((node: any) => node.data?.name?.toLowerCase() === 'object')

        // –ù–∞—Ö–æ–¥–∏–º —É–∑–ª—ã –∫–∞–º–µ—Ä—ã
        const cameraNodes = nodes.filter((node: any) => node.data?.name?.toLowerCase() === 'camera')

        // –ù–∞—Ö–æ–¥–∏–º —É–∑–ª—ã –æ—Å–≤–µ—â–µ–Ω–∏—è
        const lightNodes = nodes.filter((node: any) => node.data?.name?.toLowerCase() === 'light')

        // –°—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        const objects = objectNodes.map((node: any) => {
            const nodeData = node.data || {}
            return {
                id: node.id,
                name: nodeData.label || 'Object',
                type: nodeData.inputs?.type || 'box',
                position: nodeData.inputs?.position || { x: 0, y: 0, z: 0 },
                rotation: nodeData.inputs?.rotation || { x: 0, y: 0, z: 0 },
                scale: nodeData.inputs?.scale || { x: 1, y: 1, z: 1 },
                color: nodeData.inputs?.color || { r: 1, g: 1, b: 1 },
                width: nodeData.inputs?.width,
                height: nodeData.inputs?.height,
                depth: nodeData.inputs?.depth,
                radius: nodeData.inputs?.radius
            }
        })

        // –°—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ –∫–∞–º–µ—Ä
        const cameras = cameraNodes.map((node: any) => {
            const nodeData = node.data || {}
            return {
                id: node.id,
                name: nodeData.label || 'Camera',
                type: nodeData.inputs?.type || 'perspective',
                position: nodeData.inputs?.position || { x: 0, y: 0, z: 5 },
                rotation: nodeData.inputs?.rotation || { x: 0, y: 0, z: 0 },
                scale: nodeData.inputs?.scale || { x: 1, y: 1, z: 1 },
                fov: nodeData.inputs?.fov || 75,
                near: nodeData.inputs?.near || 0.1,
                far: nodeData.inputs?.far || 1000,
                lookAt: nodeData.inputs?.lookAt
            }
        })

        // –°—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞
        const lights = lightNodes.map((node: any) => {
            const nodeData = node.data || {}
            return {
                id: node.id,
                name: nodeData.label || 'Light',
                type: nodeData.inputs?.type || 'ambient',
                position: nodeData.inputs?.position || { x: 0, y: 0, z: 0 },
                rotation: nodeData.inputs?.rotation || { x: 0, y: 0, z: 0 },
                scale: nodeData.inputs?.scale || { x: 1, y: 1, z: 1 },
                color: nodeData.inputs?.color || { r: 1, g: 1, b: 1 },
                intensity: nodeData.inputs?.intensity || 1,
                distance: nodeData.inputs?.distance,
                decay: nodeData.inputs?.decay
            }
        })

        // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ü–µ–Ω—É
        const scene: UPDLScene = {
            id: sceneNode.id,
            name: sceneNode.data?.label || 'UPDL Scene',
            objects,
            cameras,
            lights
        }

        // –ï—Å–ª–∏ –∫–∞–º–µ—Ä—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!scene.cameras || scene.cameras.length === 0) {
            scene.cameras = [
                {
                    id: 'default-camera',
                    name: 'Default Camera',
                    type: 'perspective',
                    position: { x: 0, y: 0, z: 5 },
                    rotation: { x: 0, y: 0, z: 0 },
                    scale: { x: 1, y: 1, z: 1 },
                    fov: 75,
                    near: 0.1,
                    far: 1000
                }
            ]
        }

        // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!scene.lights || scene.lights.length === 0) {
            scene.lights = [
                {
                    id: 'default-light',
                    name: 'Default Light',
                    type: 'ambient',
                    position: { x: 0, y: 0, z: 0 },
                    rotation: { x: 0, y: 0, z: 0 },
                    scale: { x: 1, y: 1, z: 1 },
                    color: { r: 1, g: 1, b: 1 },
                    intensity: 0.8
                }
            ]
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            chatId,
            scene,
            updlScene: scene
        }
    } catch (error) {
        console.error('[server]: UPDL Build Error:', error)
        throw error
    }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
export function someFunction(params: Record<string, any>): any {
    console.log('üîç [updlFlowBuilder] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', JSON.stringify(params))
    // ... –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...
    const result = { success: true, data: params }
    console.log('üîç [updlFlowBuilder] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏:', result)
    return result
}
