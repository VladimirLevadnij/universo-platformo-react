// Main PlayCanvas MMOOMM Builder - Lightweight Coordinator
import type { ITemplateBuilder, IFlowData, BuildOptions, TemplateConfig } from '../../common/types'
import { ModeDetector } from '../utils/ModeDetector'
import { SinglePlayerBuilder } from './SinglePlayerBuilder'
import { MultiplayerBuilder } from './MultiplayerBuilder'
import { MMOOMMTemplateConfig } from '../config'

/**
 * Main PlayCanvas MMOOMM Builder
 * Lightweight coordinator that delegates to appropriate mode-specific builders
 * Target: <300 lines (currently ~100 lines)
 */
export class PlayCanvasMMOOMMBuilder implements ITemplateBuilder {
    private singlePlayerBuilder: SinglePlayerBuilder
    private multiplayerBuilder: MultiplayerBuilder

    constructor() {
        this.singlePlayerBuilder = new SinglePlayerBuilder()
        this.multiplayerBuilder = new MultiplayerBuilder()
        console.log('[PlayCanvasMMOOMMBuilder] Lightweight coordinator initialized')
    }

    /**
     * Build HTML output based on game mode
     * Delegates to appropriate mode-specific builder
     */
    async build(flowData: IFlowData, options: BuildOptions = {}): Promise<string> {
        try {
            console.log('[PlayCanvasMMOOMMBuilder] Building MMOOMM template with modular architecture')
            console.log('[PlayCanvasMMOOMMBuilder] Input flowData structure:', {
                hasUpdlSpace: !!flowData.updlSpace,
                hasMultiScene: !!flowData.multiScene,
                hasFlowData: !!flowData.flowData,
                updlSpaceEntities: flowData.updlSpace?.entities?.length || 0,
                multiSceneCount: flowData.multiScene?.totalScenes || 0
            })

            // Determine game mode using mode detector
            const gameMode = ModeDetector.determineGameMode(flowData, options)
            console.log('[PlayCanvasMMOOMMBuilder] Detected game mode:', gameMode)

            // Check if flow has meaningful content
            if (!ModeDetector.hasContent(flowData)) {
                console.log('[PlayCanvasMMOOMMBuilder] No content detected, generating default scene')
                return this.generateDefaultScene(options)
            }

            // Delegate to appropriate builder
            if (gameMode === 'multiplayer') {
                const multiplayerInfo = ModeDetector.detectMultiplayerMode(flowData)
                return await this.multiplayerBuilder.build(flowData, {
                    ...options,
                    multiplayerInfo
                })
            } else {
                return await this.singlePlayerBuilder.build(flowData, options)
            }

        } catch (error) {
            console.error('[PlayCanvasMMOOMMBuilder] Build error:', error)
            return this.generateErrorScene(error, options)
        }
    }

    /**
     * Check if this builder can handle the given flow data
     */
    canHandle(flowData: IFlowData): boolean {
        if (!flowData) {
            return false
        }

        // Check for UPDL space or multi-scene structure
        return !!(flowData.updlSpace || flowData.multiScene)
    }

    /**
     * Get template configuration information
     */
    getTemplateInfo(): TemplateConfig {
        // Return single source of truth from config with i18n namespace
        return {
            ...(MMOOMMTemplateConfig as any),
            i18nNamespace: 'templateMmoomm'
        } as TemplateConfig
    }

    /**
     * Get required libraries for MMOOMM template
     */
    getRequiredLibraries(): string[] {
        return [
            'https://code.playcanvas.com/playcanvas-stable.min.js'
        ]
    }

    /**
     * Generate default scene when no content is available
     */
    private generateDefaultScene(options: BuildOptions): string {
        console.log('[PlayCanvasMMOOMMBuilder] Generating default MMOOMM scene')

        const defaultScript = `
        // Default MMOOMM Scene - Generated by Universo Platformo
        console.log('Loading default MMOOMM scene...');

        // Create basic space environment
        const camera = new pc.Entity('camera');
        camera.addComponent('camera', {
            clearColor: new pc.Color(0.1, 0.1, 0.2)
        });
        camera.setPosition(0, 5, 10);
        camera.lookAt(0, 0, 0);
        app.root.addChild(camera);

        // Add basic lighting
        const light = new pc.Entity('light');
        light.addComponent('light', {
            type: pc.LIGHTTYPE_DIRECTIONAL,
            color: new pc.Color(1, 1, 1),
            intensity: 1
        });
        light.setEulerAngles(45, 30, 0);
        app.root.addChild(light);

        // Add a default asteroid
        const asteroid = new pc.Entity('asteroid');
        asteroid.addComponent('render', {
            type: 'box',
            material: new pc.StandardMaterial()
        });
        asteroid.render.material.diffuse = new pc.Color(0.7, 0.7, 0.7);
        app.root.addChild(asteroid);

        console.log('Default MMOOMM scene loaded');
        `

        return this.wrapWithHTML(defaultScript, options)
    }

    /**
     * Generate error scene when build fails
     */
    private generateErrorScene(error: any, options: BuildOptions): string {
        console.error('[PlayCanvasMMOOMMBuilder] Generating error scene for:', error.message)

        const errorScript = `
        // Error Scene - Generated by Universo Platformo
        console.error('MMOOMM Build Error: ${error.message}');

        // Create basic error display
        const camera = new pc.Entity('camera');
        camera.addComponent('camera', {
            clearColor: new pc.Color(0.2, 0.1, 0.1)
        });
        camera.setPosition(0, 0, 5);
        app.root.addChild(camera);

        // Add error message to console
        console.log('Please check the UPDL flow configuration and try again.');
        `

        return this.wrapWithHTML(errorScript, options)
    }

    /**
     * Wrap JavaScript with HTML document structure
     */
    private wrapWithHTML(script: string, options: BuildOptions): string {
        const isMultiplayer = options.gameMode === 'multiplayer'
        const colyseusScript = isMultiplayer ?
            '<script src="https://unpkg.com/colyseus.js@0.16.4/dist/colyseus.js"></script>' : ''

        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Universo MMOOMM - PlayCanvas</title>
    <meta name="description" content="Interactive 3D space created with Universo Platformo">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { margin: 0; padding: 0; overflow: hidden; background: #000; }
        canvas { display: block; }
    </style>
    <script src="https://code.playcanvas.com/playcanvas-stable.min.js"></script>
    ${colyseusScript}
</head>
<body>
    <canvas id="application-canvas"></canvas>
    <script>
        // Initialize PlayCanvas application
        const canvas = document.getElementById('application-canvas');
        const app = new pc.Application(canvas, {
            mouse: new pc.Mouse(canvas),
            keyboard: new pc.Keyboard(window),
            touch: new pc.TouchDevice(canvas)
        });

        // Set canvas to fill window and automatically resize
        app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);
        app.setCanvasResolution(pc.RESOLUTION_AUTO);

        // Resize handler
        window.addEventListener('resize', () => app.resizeCanvas());

        ${script}

        // Start the application
        app.start();
    </script>
</body>
</html>`
    }
}
