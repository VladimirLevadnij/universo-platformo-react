// Single Player Builder for MMOOMM Templates
// English comments only inside code
import type { IFlowData, BuildOptions } from '../../common/types'
import { HandlerManager } from '../handlers/HandlerManager'
import { createMMOOMMBuilderSystemsManager } from '../handlers/shared/builderSystems'

/**
 * Single Player Builder
 * Builds SP scene using HandlerManager and modular builder systems
 */
const DEBUG = !!(((globalThis as any)?.DEBUG_MULTIPLAYER) || ((globalThis as any)?.DEBUG_RENDER))

export class SinglePlayerBuilder {
    private handlerManager: HandlerManager

    constructor() {
        this.handlerManager = new HandlerManager()
        if (DEBUG) console.log('[SinglePlayerBuilder] Initialized with HandlerManager')
    }

    /**
     * Build single-player MMOOMM scene
     */
    async build(flowData: IFlowData, options: BuildOptions = {}): Promise<string> {
        if (DEBUG) console.log('[SinglePlayerBuilder] Building single-player MMOOMM scene')

        try {
            // Process UPDL flow data using HandlerManager
            const processedData = this.handlerManager.processForSinglePlayer(flowData)

            // Combine all generated scripts from handlers
            const spaceScripts = processedData.spaces.map((space: any) => space.script || '').join('\n')
            const entityScripts = processedData.entities.map((entity: any) => entity.script || '').join('\n')
            const componentScripts = processedData.components.map((component: any) => component.script || '').join('\n')
            const eventScripts = processedData.events.map((event: any) => event.script || '').join('\n')
            const actionScripts = processedData.actions.map((action: any) => action.script || '').join('\n')
            // Optional lights (feature-flag)
            const useUserLights = Boolean((options as any).useUserLights)
            const lightScripts = useUserLights && (processedData as any).lights
                ? ((processedData as any).lights as any[]).map((l: any) => l.script || '').join('\n')
                : ''

            const sceneScript = [
                '// Single Player MMOOMM Scene - Generated by Universo Platformo',
                `console.log('[MMOOMM] Loading single-player scene with', ${processedData.entities.length}, 'entities');`,
                '',
                '// Space configuration',
                spaceScripts,
                '',
                useUserLights ? '// Lights from UPDL' : '// Lights from UPDL (disabled by default)',
                useUserLights ? lightScripts : '',
                '',
                '// Entities',
                entityScripts,
                '',
                '// Components',
                componentScripts,
                '',
                '// Events',
                eventScripts,
                '',
                '// Actions',
                actionScripts,
                '',
                '// Start application render loop',
                'app.start();',
                `console.log('[MMOOMM] Single-player scene ready');`
            ].join('\n')

            // Generate complete HTML via systems manager (adds PlayCanvas init, HUD, controls, helpers)
            const systems = createMMOOMMBuilderSystemsManager()
            return systems.generateCompleteHTML(sceneScript, options)

        } catch (error) {
            console.error('[SinglePlayerBuilder] Build error:', error)
            // Use error scene from systems manager (includes app.start())
            const systems = createMMOOMMBuilderSystemsManager()
            return systems.generateErrorScene(options)
        }
    }
}
