---
description: If the user message starts with GIT
alwaysApply: false
---

When the user writes **GIT**, you switch to **GIT mode**.  
This mode automates committing changes, creating GitHub issues, and opening pull requests to deliver the completed work—**without adding any promotional or attribution lines**.  
Continue following your **base prompt**, and augment with the instructions below.

> **Content policy for issues / commits / PRs**  
> • **Do NOT** include any promotional, marketing, or attribution text (e.g. “Pull Request opened by …”, “Generated by …”, links to augmentcode.com, etc.).  
> • Strip or ignore any default footer that mentions Augment, your IDE, or any AI tool.  
> • Commit messages, issue bodies, and PR descriptions must contain **only** project-relevant information.  
> • If a PR or issue template injects such text automatically, delete that text before submitting.

**Steps to Follow:**

1. Begin with **"OK GIT"** to confirm GIT mode.
2. **Create a GitHub Issue**: Summarize the work completed and write a new GitHub issue describing the changes, following our issue format guidelines (see `.cursor/rules/github-issues.mdc`). Include a concise title and a detailed description of what was done and why. **Use MCP GitHub tools** (`mcp_GitHub_create_issue`) for creating issues.
3. **Post the Issue on Upstream**: **Use MCP GitHub tools** to create this issue in the **Upstream repository** (the main repo). If the current working repo is a fork and the agent lacks permission on the upstream, then create the issue in the fork instead.
4. **Commit Changes with Issue Reference**: Prepare a git commit containing all the final changes. Begin the commit message with the issue number (for example, `#123 `) followed by a brief summary of the changes. Ensure the commit message clearly references the issue (e.g., “#123 Add feature X and refactor Y”).
5. **Push to Repository**: Push the commit to the appropriate repository. If working on a fork, push to a branch on the fork (since you may not have direct push access to the upstream). If working directly in a repository where you have push rights, you can push to a new branch on that repository.
6. **Open a Pull Request**: **Use MCP GitHub tools** (`mcp_GitHub_create_pull_request`) to open a PR from the new branch to the upstream repository's main branch. In the PR title, include the issue number in the format `GH123 ` (to reference the issue). In the PR description, include `Fix #123 ` at the beginning to link the issue (so it will close automatically upon merging) and then copy or summarize the issue description in the PR body (explaining what was done).
7. **Automation and Tools**: Leverage the IDE’s capabilities to automate these steps. For example, use any provided functions or commands to create issues, commit, push, and open PRs. (If using VS Code/Cursor with Augment, assume you have tools or commands like cursor.git.commit, cursor.git.push, or GitHub API calls available.) Ensure you have a valid GitHub access token configured and that your Git user name/email and remotes (origin, upstream) are set correctly in the environment.
8. **Error Handling**: If any MCP GitHub operation fails (e.g., lack of permissions to create an upstream issue, repository not found, or authentication errors), handle it gracefully:
    - For issue creation: fall back to creating the issue in the fork repository
    - For PR creation: ensure the branch exists and try alternative base branches if needed
    - Provide clear error messages with specific MCP GitHub error details
    - Verify repository ownership and permissions before attempting operations
    - By default, if working with a fork, always create a PR to upstream rather than pushing directly to upstream's main branch (unless explicitly instructed otherwise).

_Goal: This mode should fully automate final code delivery to GitHub, creating all necessary tracking artifacts (issue, commit, PR) with minimal human intervention._
